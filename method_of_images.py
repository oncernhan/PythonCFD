#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Dec 20 21:51:21 2018

@author: tanthanhnhanphan
"""

"""Method of images"""
import numpy as np
from math import *
import matplotlib.pyplot as plt

"""Part 1: Source near a plane wall"""

"""Generate a grid"""
N = 50
x_start, x_end = -2.0, 2.0
y_start, y_end = -1.0, 1.0
x = np.linspace(x_start, x_end, N)
y = np.linspace(y_start, y_end, N)
X, Y = np.meshgrid(x, y)

class Source:
    """
    Class contains information about a source/sink
    """
    def __init__ (self, strength, x, y):
        """
        Sets the location and strength of the singularity
        
        Inputs:
            strength: float - Strength of the singularity
            x: float - x-coordinate of the singularity
            y: float - y-coordinate of the singularity
        """
        self.strength = strength
        self.x, self.y = x, y
    
    def velocity(self, X, Y):
        """
        Computes the velocity field generated by a singularity
        
        Inputs:
            X: 2D numpy array of floats x-coordinate of the mesh points
            Y: 2D numpy array of floats y-coordinate of the mesh points
        """
        
        self.u = self.strength / (2 * pi) * (X - self.x) / ((X - self.x)**2 + (Y - self.y)**2)
        self.v = self.strength / (2 * pi) * (Y - self.y) / ((X - self.x)**2 + (Y - self.y)**2)
    
    def stream_function(self, X, Y):
        """
        Computes the stream-function generated by the singularity
        
        Inputs:
            X: 2D numpy array of floats x-coordinate of the mesh points
            Y: 2D numpy array of floats y-coordinate of the mesh points
        """
        self.psi = self.strength / (2 * pi) * np.arctan2((Y - self.y), (X - self.x))
        
strength_source = 1.0
x_source, y_source = 0.0, 0.5

"""Create a source (object of class Source)"""
source = Source(strength_source, x_source, y_source)
"""Compute the velocity field and the stream function of the mesh grid"""
source.velocity(X, Y)
source.stream_function(X, Y)

"""Create the image of the source and computes velocity and stream function"""
source_image = Source(strength_source, x_source, -y_source)
source_image.velocity(X, Y)
source_image.stream_function(X, Y)

"""Superposition of the source and its image"""
u = source.u + source_image.u
v = source.v + source_image.v

"""Plot the streamlines"""

width = 10.0
height = (y_end - y_start) / (x_end - x_start) * width
plt.figure(figsize = (width, height))
plt.xlabel('x', fontsize = 16)
plt.ylabel('y', fontsize = 16)
plt.xlim(x_start, x_end)
plt.ylim(y_start, y_end)
plt.streamplot(X, Y, u, v, density = 2, linewidth = 1, arrowsize = 1, arrowstyle ='->')
plt.scatter([source.x, source_image.x], [source.y, source_image.y], color = '#CD2305', s = 80, marker = 'o')
plt.axhline(0., color = 'k', linestyle = '--', linewidth = 4)
plt.savefig('source_near_a_wall.png', dpi = 200)
plt.show()


"""Vortex near a plane wall"""
class Vortex:
    """
    Class contains information about a vortex
    """
    def __init__(self, strength, x, y, X, Y):
        """
        Sets the location and strength of the singularity
        
        Inputs:
            strength: float - Strength of the singularity
            x: float - x-coordinate of the singularity
            y: float - y-coordinate of the singularity
            X: 2D numpy array of floats x-coordinate of the mesh points
            Y: 2D numpy array of floats y-coordinate of the mesh points
        """
        self.strength = strength
        self.x = x
        self.y = y
        self.X = X
        self.Y = Y
    def velocity(self):
        """
        Computes the velocity field of a vortex
        """
        self.u =  self.strength / (2 * pi) * (self.Y - self.y) / ((self.X - self.x)**2 + (self.Y - self.y)**2)
        self.v = -self.strength / (2 * pi) * (self.X - self.x) / ((self.X - self.x)**2 + (self.Y - self.y)**2)
        
    def stream_function(self):
        """
        Computes the stream function generated by a vortex
        """
        self.psi = -self.strength / (4 * pi) * np.log((self.X - self.x)**2 + (self.Y - self.y)**2)

strength_vortex = 1.0
x_vortex, y_vortex = 0.0, 0.5

"""Create a vortex and computes velocity and stream-function"""
vortex = Vortex(strength_vortex, x_vortex, y_vortex, X, Y)
vortex.velocity()
vortex.stream_function()

"""Create the image of the vortex and computes the velocity and stream-function"""
vortex_image = Vortex(-strength_vortex, x_vortex, -y_vortex, X, Y)
vortex_image.velocity()
vortex_image.stream_function()


"""Superposition of the vortex and its image"""
u = vortex.u + vortex_image.u
v = vortex.v + vortex_image.v

"""Plot the streamlines"""
width = 10.0
plt.figure(figsize = (width, height))
plt.xlabel('x', fontsize = 16)
plt.ylabel('y', fontsize = 16)
plt.xlim(x_start, x_end)
plt.ylim(y_start, y_end)
plt.streamplot(X, Y, u, v, density = 2, linewidth = 1, arrowsize = 1, arrowstyle ='->')
plt.scatter([vortex.x, vortex_image.x], [vortex.y, vortex_image.y], color = '#CD2305', s = 80, marker = 'o')
plt.axhline(0., color = 'k', linestyle = '--', linewidth = 4)
plt.savefig('source_near_a_wall.png', dpi = 200)
plt.show()


#%%

"""Motion of vortex pair near the ground"""
strength_vortex = 1.0
x_vortex1, y_vortex1 = -0.1, 0.5
x_vortex2, y_vortex2 = +0.1, 0.5

"""Create a vortex pair and computes velocity and stream-function"""
vortex1 = Vortex(strength_vortex, x_vortex1, y_vortex1, X, Y)
vortex2 = Vortex(-strength_vortex, x_vortex2, y_vortex2, X, Y)
vortex1.velocity()
vortex1.stream_function()
vortex2.velocity()
vortex2.stream_function()

vortex_image1 = Vortex(-strength_vortex, x_vortex1, -y_vortex1, X, Y)
vortex_image2 = Vortex(+strength_vortex, x_vortex2, -y_vortex2, X, Y)
vortex_image1.velocity()
vortex_image1.stream_function()
vortex_image2.velocity()
vortex_image2.stream_function()

"""Supoerposition of vortex pair"""
u = vortex1.u + vortex2.u + vortex_image1.u + vortex_image2.u
v = vortex1.v + vortex2.v + vortex_image1.v + vortex_image2.v


"""Plot the streamlines"""
width = 10.0
plt.figure(figsize = (width, height))
plt.xlabel('x', fontsize = 16)
plt.ylabel('y', fontsize = 16)
plt.xlim(x_start, x_end)
plt.ylim(y_start, y_end)
plt.streamplot(X, Y, u, v, density = 2, linewidth = 1, arrowsize = 1, arrowstyle ='->')
plt.scatter([vortex1.x, vortex_image1.x], [vortex1.y, vortex_image1.y], color = '#CD2305', s = 80, marker = 'o')
plt.scatter([vortex2.x, vortex_image2.x], [vortex2.y, vortex_image2.y], color = 'g', s = 80, marker = 'D')
plt.axhline(0., color = 'k', linestyle = '--', linewidth = 4)
plt.savefig('source_near_a_wall.png', dpi = 200)
plt.show()

#%%
u_inf = 1.0

u_freestream = u_inf * np.ones((N, N), float)
v_freestream = np.zeros((N, N), float)
psi_freestream = u_inf * Y

class Doublet:
    """
    Class contains information about a doublet
    """
    def __init__(self, strength, x, y):
        self.strength = strength
        self.x, self.y = x, y
    
    def velocity(self, X, Y):
        self.u = -self.strength / (2*pi) * ((X - self.x)**2 - (Y - self.y)**2) / ((X - self.x)**2 + (Y - self.y)**2)**2
        self.v = -self.strength / (2*pi) * 2 * (X - self.x) * (Y - self.y) / ((X - self.x)**2 + (Y - self.y)**2)**2
    
    def stream_function(self, X, Y):
        """
        Computes the stream-function generated by a doublet
        """
        self.psi = -self.strength / (2*pi) * (Y - self.y) / ((X - self.x)**2 + (Y - self.y)**2)

strength_doublet = 1.0
x_doublet, y_doublet = 0.0, 0.3

doublet = Doublet(strength_doublet, x_doublet, y_doublet)
doublet.velocity(X, Y)
doublet.stream_function(X, Y)

doublet_image = Doublet(strength_doublet, x_doublet, -y_doublet)
doublet_image.velocity(X, Y)
doublet_image.stream_function(X, Y)

u = u_freestream + doublet.u + doublet_image.u
v = v_freestream + doublet.v + doublet_image.v
psi = psi_freestream + doublet.psi + doublet_image.psi


width = 10
height = (y_end - y_start) / (x_end - x_start) * width
plt.figure(figsize=(width, height))
plt.xlabel('x', fontsize=16)
plt.ylabel('y', fontsize=16)
plt.xlim(x_start, x_end)
plt.ylim(y_start, y_end)
plt.streamplot(X, Y, u, v, density=2, linewidth=1, arrowsize=1, arrowstyle='->')
plt.scatter(doublet.x, doublet.y, color='r', s=80, marker='o')
plt.scatter(doublet_image.x, doublet_image.y, color='r', s=80, marker='D')
plt.axhline(0., color='k', linestyle='--', linewidth=4)



